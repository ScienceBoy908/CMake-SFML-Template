import os
import sys
import zipfile

def zip_directory(directory_path, zip_path):
    """Compress the given directory into a ZIP file."""
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(directory_path):
            for file in files:
                file_path = os.path.join(root, file)
                arcname = os.path.relpath(file_path, start=directory_path)
                zipf.write(file_path, arcname=arcname)

def convert_to_header(zip_file, output_file):
    """Convert the ZIP file to a C++ header with a byte array."""
    with open(zip_file, 'rb') as f:
        content = f.read()
    
    variable_name = os.path.basename(output_file).replace('.hpp', '')

    with open(output_file, 'w') as f:
        f.write("#pragma once\n\n//Generated by my super cool script.\n")
        f.write(f"inline unsigned char {variable_name}[] = {{\n")
        for i, byte in enumerate(content):
            if i % 12 == 0:
                f.write('\n    ')
            f.write(f'0x{byte:02x}, ')
        f.write('\n};\n')
        f.write(f"inline unsigned int {variable_name}_len = {len(content)};\n")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python generate_header.py <resource_directory> <output_header>")
        sys.exit(1)
    
    resource_directory = sys.argv[1]
    output_header = sys.argv[2]
    
    # Create a temporary zip file
    temp_zip = "temp_resources.zip"
    zip_directory(resource_directory, temp_zip)
    
    # Convert the zip file to a header
    convert_to_header(temp_zip, output_header)
    
    # Clean up temporary zip file
    os.remove(temp_zip)
